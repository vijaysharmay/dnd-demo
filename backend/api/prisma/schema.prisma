// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  DESIGNER
  DEVELOPER
  OWNER
}

enum AccordType {
  OPENAPI
  JSONSCHEMA
}

model User {
  id               String                      @id @map("id")
  fullName         String                      @map("full_name")
  email            String                      @unique @map("email")
  passwd           String
  salt             String
  ownerOfWorkspace Workspace[]                 @relation(name: "ownerOfWorkspace")
  ownerOfProject   Project[]                   @relation(name: "ownerOfProject")
  ownerOfAccord    Accord[]                    @relation(name: "ownerOfAccord")
  ownerOfPage      Page[]                      @relation(name: "ownerOfPage")
  workspaces       UserWorkspaceRole[]         @relation(name: "userOfWorkspace")
  userWorkspace    Workspace?                  @relation(fields: [userWorkspaceId], references: [id], name: "userWorkspace")
  userWorkspaceId  String?                     @unique @map("user_workspace_id")
  changes          VersionChangeLog[]          @relation(name: "madeChangesToVersion")
  statusChanges    VersionStatusLog[]          @relation(name: "madeStatusChangesToVersion")
  approverFor      VersionStatusLogApprovers[] @relation(name: "approverForStatusChangesToVersion")
  versions         Version[]                   @relation(name: "ownerOfVersion")

  @@map("users")
}

model Workspace {
  id                     String              @id @map("id")
  name                   String              @unique @map("workspace_name")
  owner                  User                @relation(fields: [ownerId], references: [id], name: "ownerOfWorkspace")
  ownerId                String
  isUserWorkspace        Boolean             @map("is_user_workspace")
  route                  String?             @unique @map("workspace_route")
  members                UserWorkspaceRole[] @relation(name: "workspaceUsers")
  projects               Project[]           @relation(name: "projectsInWorkspace")
  pages                  Page[]              @relation(name: "pagesInWorkspace")
  accords                Accord[]            @relation(name: "accordsInWorkspace")
  defaultWorkspaceUserId User?               @relation(name: "userWorkspace")
  versions               Version[]           @relation(name: "versionsInWorkspace")

  @@map("workspaces")
}

model UserWorkspaceRole {
  user        User      @relation(fields: [userId], references: [id], name: "userOfWorkspace", onDelete: Cascade, onUpdate: Cascade, map: "user_of_workspace_fkey")
  userId      String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], name: "workspaceUsers", onDelete: Cascade, onUpdate: Cascade, map: "workspace_for_user_fkey")
  workspaceId String
  role        UserRole

  @@id([userId, workspaceId])
  @@map("role_for_user_in_workspace")
}

model Project {
  id          String    @id @map("id")
  name        String    @map("name")
  owner       User      @relation(fields: [ownerId], references: [id], name: "ownerOfProject")
  ownerId     String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], name: "projectsInWorkspace")
  workspaceId String
  route       String    @unique @map("route")
  pages       Page[]    @relation(name: "pagesInProject")
  accords     Accord[]  @relation(name: "accordsInProject")
  versions    Version[] @relation(name: "versionsInProject")

  @@map("projects")
}

model Accord {
  id            String     @id @map("id")
  accordName    String     @map("accord_name")
  accordType    AccordType @map("accord_type")
  accordSchema  Json       @map("accord_schema")
  accordVersion String     @map("accord_version")
  accordAPIUrl  String?    @map("accord_apiurl")
  owner         User       @relation(fields: [ownerId], references: [id], name: "ownerOfAccord")
  ownerId       String
  project       Project    @relation(fields: [projectId], references: [id], name: "accordsInProject")
  projectId     String
  workspace     Workspace  @relation(fields: [workspaceId], references: [id], name: "accordsInWorkspace")
  workspaceId   String

  @@unique([workspaceId, projectId, accordName])
  @@map("accords")
}

enum PageVersionStatus {
  DRAFT
  PENDING_REVIEW
  APPROVED
  PUBLISHED
  REJECTED
}

model Page {
  id          String    @id @map("id")
  name        String    @map("name")
  route       String    @unique @map("route")
  owner       User      @relation(fields: [ownerId], references: [id], name: "ownerOfPage")
  ownerId     String
  project     Project   @relation(fields: [projectId], references: [id], name: "pagesInProject", onDelete: Cascade, onUpdate: Cascade)
  projectId   String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], name: "pagesInWorkspace")
  workspaceId String
  versions    Version[] @relation(name: "versionsInPage")

  @@unique([workspaceId, projectId, name, route])
  @@map("pages")
}

model Block {
  id        String   @id @map("id")
  blockType String   @map("block_type") //should be enum
  props     Json     @map("props")
  depth     Int      @default(0)
  position  Float    @default(1)
  children  Block[]  @relation("nestedBlocks")
  parent    Block?   @relation("nestedBlocks", fields: [parentId], references: [id])
  parentId  String?
  flows     Flow[]   @relation(name: "flowsInBlock")
  version   Version? @relation(fields: [versionId], references: [id], name: "blocksInVersion")
  versionId String?

  @@map("blocks")
}

model Version {
  id            String             @id @map("id")
  name          String             @default("main") @map("version_name")
  currentStatus PageVersionStatus  @default(value: DRAFT)
  blocks        Block[]            @relation(name: "blocksInVersion")
  owner         User               @relation(fields: [ownerId], references: [id], name: "ownerOfVersion")
  ownerId       String
  page          Page?              @relation(fields: [pageId], references: [id], name: "versionsInPage", onDelete: Cascade, onUpdate: Cascade)
  pageId        String?
  project       Project            @relation(fields: [projectId], references: [id], name: "versionsInProject", onDelete: Cascade, onUpdate: Cascade)
  projectId     String
  workspace     Workspace          @relation(fields: [workspaceId], references: [id], name: "versionsInWorkspace", onDelete: Cascade, onUpdate: Cascade)
  workspaceId   String
  changeLog     VersionChangeLog[] @relation(name: "changesMadeToVersion")
  statusLog     VersionStatusLog[] @relation(name: "statusChangesMadeToVersion")

  @@map("versions")
}

model VersionStatusLog {
  id            String                      @id @map("id")
  status        PageVersionStatus
  changeOwner   User                        @relation(fields: [changeOwnerId], references: [id], name: "madeStatusChangesToVersion")
  changeOwnerId String
  approvers     VersionStatusLogApprovers[] @relation(name: "requestedApprovalForStatusChangesToVersion")
  version       Version?                    @relation(fields: [versionId], references: [id], name: "statusChangesMadeToVersion", onDelete: Cascade, onUpdate: Cascade)
  versionId     String?
  changesMadeOn DateTime                    @default(now())

  @@map("version_status_log")
}

enum VersionStatusLogApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

model VersionStatusLogApprovers {
  id                 String                         @id @map("id")
  comment            String?
  approver           User                           @relation(fields: [approverId], references: [id], name: "approverForStatusChangesToVersion")
  approverId         String
  versionStatusLog   VersionStatusLog?              @relation(fields: [versionStatusLogId], references: [id], name: "requestedApprovalForStatusChangesToVersion", onDelete: Cascade, onUpdate: Cascade)
  versionStatusLogId String?
  status             VersionStatusLogApprovalStatus

  @@map("version_status_log_approvers")
}

model VersionChangeLog {
  id            String   @id @map("id")
  changeLog     String
  changeOwner   User     @relation(fields: [changeOwnerId], references: [id], name: "madeChangesToVersion")
  changeOwnerId String
  version       Version? @relation(fields: [versionId], references: [id], name: "changesMadeToVersion")
  versionId     String?
  changesMadeOn DateTime @default(now())

  @@map("version_change_log")
}

model Flow {
  id           String   @id @map("id")
  name         String   @map("name")
  triggerEvent String   @map("trigger_event") // should be enum
  ofBlock      Block    @relation(name: "flowsInBlock", fields: [blockId], references: [id])
  blockId      String
  actions      Action[]
  // actions      ActionsInFlows[] @relation(name: "partOfFlow")

  @@map("flows")
}

model Action {
  id           String @id @map("id")
  actionId     String @unique @map("action_id")
  actionType   String @map("action_type") // should be enum
  defaultProps Json   @map("default_props")
  props        Json?  @map("props")
  route        String @unique @map("route")
  flows        Flow[]
  // flows        ActionsInFlows[] @relation(name: "partOfAction")

  @@map("actions")
}

// model ActionsInFlows {
//   flow     Flow   @relation(fields: [flowId], references: [id], name: "partOfFlow", map: "flow_workspace_fk")
//   flowId   String
//   action   Action @relation(fields: [actionId], references: [id], name: "partOfAction")
//   actionId String

//   @@id([flowId, actionId])
//   @@map("actions_in_flows")
// }
