// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  DESIGNER
  DEVELOPER
  OWNER
}

model User {
  id               String      @id @map("id")
  fullName         String      @map("full_name")
  email            String      @unique @map("email")
  passwd           String      @map("passwd")
  role             UserRole    @map("user_role")
  ownerOfWorkspace Workspace[] @relation(name: "ownerOfWorkspace")
  ownerOfProject   Project[]   @relation(name: "ownerOfProject")
  ownerOfPage      Page[]      @relation(name: "ownerOfPage")
  workspaces       Workspace[]

  @@map("users")
}

model Workspace {
  id       String    @id @map("id")
  name     String    @map("name")
  owner    User      @relation(fields: [ownerId], references: [id], name: "ownerOfWorkspace")
  ownerId  String    @unique
  route    String    @unique @map("workspace_route")
  members  User[]
  projects Project[] @relation(name: "partOfWorkspace")

  @@map("workspaces")
}

model Project {
  id             String    @id @map("id")
  name           String    @map("name")
  projectOwner   User      @relation(fields: [projectOwnerId], references: [id], name: "ownerOfProject")
  projectOwnerId String    @unique
  workspace      Workspace @relation(fields: [workspaceId], references: [id], name: "partOfWorkspace")
  workspaceId    String    @unique
  route          String    @unique @map("route")
  pages          Page[]    @relation(name: "partOfProject")

  @@map("projects")
}

model Page {
  id          String  @id @map("id")
  name        String  @map("name")
  pageOwner   User    @relation(fields: [pageOwnerId], references: [id], name: "ownerOfPage")
  pageOwnerId String  @unique
  project     Project @relation(fields: [projectId], references: [id], name: "partOfProject")
  projectId   String  @unique
  route       String  @unique @map("route")
  blocks      Block[] @relation(name: "partOfPage")

  @@map("pages")
}

model Block {
  id           String  @id @map("id")
  blockId      String  @unique @map("block_id")
  blockType    String  @map("block_type") //should be enum
  defaultProps Json    @map("default_props")
  props        Json?   @map("props")
  page         Page    @relation(fields: [pageId], references: [id], name: "partOfPage")
  pageId       String  @unique
  route        String  @unique @map("route")
  flow         Flow?   @relation(fields: [flowId], references: [id], name: "hasFlow")
  flowId       String? @unique

  @@map("blocks")
}

model Flow {
  id           String           @id @map("id")
  name         String           @map("name")
  triggerEvent String           @map("trigger_event") // should be enum
  actions      ActionsInFlows[] @relation(name: "partOfFlow")
  ofBlock      Block?           @relation(name: "hasFlow")

  @@map("flows")
}

model Action {
  id           String           @id @map("id")
  actionId     String           @unique @map("action_id")
  actionType   String           @map("action_type") // should be enum
  defaultProps Json             @map("default_props")
  props        Json?            @map("props")
  route        String           @unique @map("route")
  flows        ActionsInFlows[] @relation(name: "partOfAction")

  @@map("actions")
}

model ActionsInFlows {
  flow     Flow   @relation(fields: [flowId], references: [id], name: "partOfFlow", map: "flow_workspace_fk")
  flowId   String
  action   Action @relation(fields: [actionId], references: [id], name: "partOfAction")
  actionId String

  @@id([flowId, actionId])
  @@map("actions_in_flows")
}
